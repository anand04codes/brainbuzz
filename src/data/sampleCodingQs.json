[
  {
    "id": "coding_1",
    "title": "Two Sum",
    "difficulty": "Easy",
    "description": "Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target. You may assume that each input would have exactly one solution, and you may not use the same element twice.",
    "examples": [
      {
        "input": "nums = [2,7,11,15], target = 9",
        "output": "[0,1]",
        "explanation": "Because nums[0] + nums[1] == 9, we return [0, 1]."
      }
    ],
    "constraints": [
      "2 <= nums.length <= 10^4",
      "-10^9 <= nums[i] <= 10^9",
      "-10^9 <= target <= 10^9",
      "Only one valid answer exists."
    ],
    "starterCode": "function twoSum(nums, target) {\n    // Your code here\n}",
    "language": "javascript",
    "testCases": [
      {
        "input": "[[2,7,11,15], 9]",
        "expectedOutput": "[0,1]"
      },
      {
        "input": "[[3,2,4], 6]",
        "expectedOutput": "[1,2]"
      }
    ]
  },
  {
    "id": "coding_2",
    "title": "Reverse String",
    "difficulty": "Easy",
    "description": "Write a function that reverses a string. The input string is given as an array of characters s.",
    "examples": [
      {
        "input": "s = ['h','e','l','l','o']",
        "output": "['o','l','l','e','h']"
      }
    ],
    "constraints": [
      "1 <= s.length <= 10^5",
      "s[i] is a printable ascii character."
    ],
    "starterCode": "function reverseString(s) {\n    // Your code here\n}",
    "language": "javascript",
    "testCases": [
      {
        "input": "[['h','e','l','l','o']]",
        "expectedOutput": "['o','l','l','e','h']"
      }
    ]
  },
  {
    "id": "coding_3",
    "title": "Valid Parentheses",
    "difficulty": "Easy",
    "description": "Given a string s containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.",
    "examples": [
      {
        "input": "s = '()'",
        "output": "true"
      },
      {
        "input": "s = '()[]{}'",
        "output": "true"
      },
      {
        "input": "s = '(]'",
        "output": "false"
      }
    ],
    "constraints": [
      "1 <= s.length <= 10^4",
      "s consists of parentheses only '()[]{}'."
    ],
    "starterCode": "function isValid(s) {\n    // Your code here\n}",
    "language": "javascript",
    "testCases": [
      {
        "input": "['()']",
        "expectedOutput": "true"
      },
      {
        "input": "['()[]{}']",
        "expectedOutput": "true"
      },
      {
        "input": "['(]']",
        "expectedOutput": "false"
      }
    ]
  },
  {
    "id": "coding_4",
    "title": "Merge Two Sorted Lists",
    "difficulty": "Easy",
    "description": "Merge two sorted linked lists and return it as a sorted list.",
    "examples": [
      {
        "input": "list1 = [1,2,4], list2 = [1,3,4]",
        "output": "[1,1,2,3,4,4]"
      }
    ],
    "constraints": [
      "The number of nodes in both lists is in the range [0, 50].",
      "-100 <= Node.val <= 100",
      "Both list1 and list2 are sorted in non-decreasing order."
    ],
    "starterCode": "function mergeTwoLists(list1, list2) {\n    // Your code here\n}",
    "language": "javascript",
    "testCases": [
      {
        "input": "[[1,2,4], [1,3,4]]",
        "expectedOutput": "[1,1,2,3,4,4]"
      }
    ]
  },
  {
    "id": "coding_5",
    "title": "Maximum Subarray",
    "difficulty": "Medium",
    "description": "Given an integer array nums, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum.",
    "examples": [
      {
        "input": "nums = [-2,1,-3,4,-1,2,1,-5,4]",
        "output": "6",
        "explanation": "[4,-1,2,1] has the largest sum = 6."
      }
    ],
    "constraints": [
      "1 <= nums.length <= 10^5",
      "-10^4 <= nums[i] <= 10^4"
    ],
    "starterCode": "function maxSubArray(nums) {\n    // Your code here\n}",
    "language": "javascript",
    "testCases": [
      {
        "input": "[[-2,1,-3,4,-1,2,1,-5,4]]",
        "expectedOutput": "6"
      }
    ]
  },
  {
    "id": "coding_6",
    "title": "Climbing Stairs",
    "difficulty": "Easy",
    "description": "You are climbing a staircase. It takes n steps to reach the top. Each time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?",
    "examples": [
      {
        "input": "n = 2",
        "output": "2",
        "explanation": "There are two ways to climb to the top: 1. 1 step + 1 step 2. 2 steps"
      }
    ],
    "constraints": [
      "1 <= n <= 45"
    ],
    "starterCode": "function climbStairs(n) {\n    // Your code here\n}",
    "language": "javascript",
    "testCases": [
      {
        "input": "[2]",
        "expectedOutput": "2"
      },
      {
        "input": "[3]",
        "expectedOutput": "3"
      }
    ]
  },
  {
    "id": "coding_7",
    "title": "Binary Tree Inorder Traversal",
    "difficulty": "Easy",
    "description": "Given the root of a binary tree, return the inorder traversal of its nodes' values.",
    "examples": [
      {
        "input": "root = [1,null,2,3]",
        "output": "[1,3,2]"
      }
    ],
    "constraints": [
      "The number of nodes in the tree is in the range [0, 100].",
      "-100 <= Node.val <= 100"
    ],
    "starterCode": "function inorderTraversal(root) {\n    // Your code here\n}",
    "language": "javascript",
    "testCases": [
      {
        "input": "[[1,null,2,3]]",
        "expectedOutput": "[1,3,2]"
      }
    ]
  },
  {
    "id": "coding_8",
    "title": "Same Tree",
    "difficulty": "Easy",
    "description": "Given the roots of two binary trees p and q, write a function to check if they are the same or not.",
    "examples": [
      {
        "input": "p = [1,2,3], q = [1,2,3]",
        "output": "true"
      }
    ],
    "constraints": [
      "The number of nodes in both trees is in the range [0, 100].",
      "-10^4 <= Node.val <= 10^4"
    ],
    "starterCode": "function isSameTree(p, q) {\n    // Your code here\n}",
    "language": "javascript",
    "testCases": [
      {
        "input": "[[1,2,3], [1,2,3]]",
        "expectedOutput": "true"
      }
    ]
  },
  {
    "id": "coding_9",
    "title": "Symmetric Tree",
    "difficulty": "Easy",
    "description": "Given the root of a binary tree, check whether it is a mirror of itself (i.e., symmetric around its center).",
    "examples": [
      {
        "input": "root = [1,2,2,3,4,4,3]",
        "output": "true"
      }
    ],
    "constraints": [
      "The number of nodes in the tree is in the range [1, 1000].",
      "-100 <= Node.val <= 100"
    ],
    "starterCode": "function isSymmetric(root) {\n    // Your code here\n}",
    "language": "javascript",
    "testCases": [
      {
        "input": "[[1,2,2,3,4,4,3]]",
        "expectedOutput": "true"
      }
    ]
  },
  {
    "id": "coding_10",
    "title": "Maximum Depth of Binary Tree",
    "difficulty": "Easy",
    "description": "Given the root of a binary tree, return its maximum depth.",
    "examples": [
      {
        "input": "root = [3,9,20,null,null,15,7]",
        "output": "3"
      }
    ],
    "constraints": [
      "The number of nodes in the tree is in the range [0, 10^4].",
      "-100 <= Node.val <= 100"
    ],
    "starterCode": "function maxDepth(root) {\n    // Your code here\n}",
    "language": "javascript",
    "testCases": [
      {
        "input": "[[3,9,20,null,null,15,7]]",
        "expectedOutput": "3"
      }
    ]
  }
]
